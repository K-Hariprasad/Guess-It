{"version":3,"sources":["images/smile.jpg","images/sad.jpg","components/Result.js","components/game.js","components/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Result","reload","window","location","state","this","props","result","Fragment","className","src","smile","alt","onClick","sad","React","Component","Game","guessInput","event","setState","guess","target","value","submitGuess","preventDefault","Number","left","display","compare","input","number","message","style","color","border","id","onSubmit","type","onChange","placeholder","Welcome","getUser","userName","enterGame","x","Math","floor","random","logged","user","name","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c81a48d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smile.c081c40c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sad.4685f249.jpg\";","import React from \"react\";\r\nimport smile from '../images/smile.jpg'\r\nimport sad from '../images/sad.jpg'\r\n\r\nclass Result extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n         \r\n      };\r\n    }\r\n    reload=()=>{\r\n        window.location.reload()\r\n    }\r\n    render() {\r\n        if(this.props.result===\"won\"){\r\n            return(\r\n            <React.Fragment>\r\n                <div className=\"col-md-4 offset-md-4 text-center result-won text-light\">\r\n                    \r\n                        <p>Congratulations, You won the game..!</p>\r\n                        <div className=\"pic\">\r\n                            <img src={smile} alt=\"smile_image\"></img>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn btn-primary\" onClick={this.reload}>Play Again</button>\r\n                        </div>\r\n                </div>\r\n            </React.Fragment>\r\n            )\r\n            }\r\n        else{\r\n            return(\r\n                <React.Fragment>\r\n                    <div className=\"col-md-4 offset-md-4 text-center result-lost text-light\">\r\n                        <p>Bad luck, You loose the game..!</p>\r\n                        <div className=\"pic\">\r\n                            <img src={sad} alt=\"sad_image\"></img>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn btn-primary\" onClick={this.reload}>Play Again</button>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Result;","import React from \"react\";\r\nimport './Game.css'\r\nimport Result from  './Result'\r\nclass Game extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        result : '',\r\n        left : 5,\r\n        guess : '',\r\n        display : '?',\r\n        message:\"Let's start guessing.....\",\r\n        style:{color:'white',border:'solid 2px white'}\r\n    };\r\n  }\r\n  guessInput = (event) => {\r\n     this.setState({guess:event.target.value});\r\n  }\r\n  submitGuess = (event) => {\r\n      event.preventDefault();\r\n      if(Number(this.state.left)>=1 && (this.state.guess)){\r\n        this.setState({display:this.state.guess,guess:''});\r\n        this.setState({left:this.state.left-1});\r\n        this.compare()}\r\n        ;\r\n  }\r\n  compare = () => {\r\n      var input = Number(this.state.guess);\r\n      var number = Number(this.props.number);\r\n      if (this.state.left>1){\r\n        \r\n        if(input===number){\r\n            this.setState({message:'You got it..!',result:'won'})\r\n        }\r\n        else if((number-2)<=input && input<=(number+2)){\r\n            this.setState({\r\n                style:{color:'rgb(83, 225, 10)',border:'solid 2px rgb(83, 225, 10)'},\r\n                message:\"You are too close...!\"\r\n            })\r\n        }\r\n        else if((number-5)<=input && input<=(number+5)){\r\n            this.setState({\r\n                style:{color:'rgb(241, 255, 10)',border:'solid 2px rgb(241, 255, 10)'},\r\n                message:\"You are close to it...!\"\r\n            })\r\n        }\r\n        else if((number-10)<=input && input<=(number+10)){\r\n            this.setState({\r\n                style:{color:'yellow',border:'solid 2px yellow'},\r\n                message:\"You are coming closer...!\"\r\n            })\r\n        }\r\n        else if((number-20)<=input && input<=(number+20)){\r\n            this.setState({\r\n                style:{color:'orange',border:'solid 2px orange'},\r\n                message:\"You are somewhere in middle way...!\"\r\n            })\r\n        }\r\n        else if((number-30)<=input && input<=(number+30)){\r\n            this.setState({\r\n                style:{color:'rgb(253, 94, 2)',border:'solid 2px rgb(253, 94, 2)'},\r\n                message:\"You are far from it...!\"\r\n            }) \r\n        }\r\n        else{\r\n            this.setState({\r\n                style:{color:'red',border:'solid 2px red'},\r\n                message:\"You are too far...!\"\r\n            })   \r\n        }\r\n      }\r\n      else{\r\n        if(input===number){\r\n            this.setState({message:'You got it..!',result:'won'})\r\n        }\r\n        else{ \r\n             this.setState({message:'You loose it..!',result:'loose'})\r\n            \r\n        }\r\n      }\r\n  }\r\n  render() {\r\n      if(this.state.result){\r\n          return <Result result={this.state.result}></Result>\r\n      }\r\n      else{\r\n        return(\r\n            <React.Fragment>\r\n                <div id=\"game\" className=\"col-md-4 offset-md-4 text-light text-center\">\r\n                <div className=\"game-title\">\r\n                <h1>GUESS IT</h1>\r\n                </div>   \r\n                <div id=\"chances\">\r\n                    <p>You have {this.state.left} chances left</p>\r\n                </div>\r\n                <div id=\"display\" >\r\n                    <p style={this.state.style}>{this.state.display}</p>\r\n                </div>\r\n\r\n                <div id=\"message\" style={this.state.style}>\r\n                    <p>{this.state.message}</p>\r\n                </div>\r\n\r\n                <div id=\"gameInput\">\r\n                    <form onSubmit={this.submitGuess}>\r\n                        <div>\r\n                            <input type=\"number\" value={this.state.guess} onChange={this.guessInput} placeholder=\"Guess here...\"></input>\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\">GUESS</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport Game from './game';\r\nimport './Welcome.css'\r\n\r\nclass Welcome extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userName:'',\r\n      logged:false,\r\n      number:''\r\n    };\r\n  }\r\n  getUser = (event) => {\r\n    this.setState({ userName: event.target.value }); \r\n  };\r\n  enterGame = () => {\r\n    var x = Math.floor((Math.random() * 100) + 1);\r\n    if (this.state.userName){\r\n    this.setState({number:x,logged : true})\r\n    }\r\n    }\r\n\r\n  render() {\r\n     if(this.state.logged){\r\n      return  <Game user={this.state.userName} number={this.state.number}></Game>\r\n     }\r\n    else{  \r\n        return(\r\n            <React.Fragment>\r\n                <div id=\"welcome\" className=\"col-md-4 offset-md-4 text-center text-light\">\r\n                    <div id=\"title-box\">\r\n                    <h1 className=\"title\">GUESS IT</h1>\r\n                    </div>\r\n\r\n                    <div className=\"input-box\">\r\n                    <input type=\"text\" placeholder=\"Enter your name\" name=\"user\" onChange={this.getUser}></input>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <button onClick={this.enterGame}>Let's Play</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n}\r\nexport default Welcome;","import React from 'react';\nimport Welcome from \"./components/Welcome\"\nimport './App.css'\n\nfunction App() {\n    return (\n      <Welcome></Welcome>\n    );\n  }\n  \n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}